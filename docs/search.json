{
  "articles": [
    {
      "path": "w02_exercises.html",
      "title": "Exercises: Week 2",
      "author": [],
      "contents": "\n\nContents\nMain exercises\nExercise 1: Course notes in Markdown\nExercise 2\n\nBonus exercises\nExercise 3\nBuffalo Chapter 3 code-along\n\nSolutions\nExercise 2\n\n\nMain exercises\nExercise 1: Course notes in Markdown\nCreate a Markdown document with course notes. I recommend writing this document in VS Code.\nCover this week’s material in some detail. If you made notes last week in another format, include those too. (And try to keep using this document throughout the course!)\nSome pointers:\nUse several header levels and use them consistently: e.g. a level 1 header (#) for the document’s title, level 2 headers (##) for each week, and so on.\nThough this should foremost be a functional document for notes, try to incorporate any appropriate formatting option: e.g. bold text, italic text, inline code, code blocks, ordered/unordered lists, hyperlinks, and perhaps a figure.\nYou may even want to try your hand at a table in Markdown (e.g. for an overview of certain commands), though admittedly, the syntax for a table is not particularly graceful or easy to use.\nMake sure you know how to start a new paragraph and how to force a newline.\nExercise 2\nWhile doing this exercise, save the commands you use in a text document – either write in a text document in VS Code and send the commands to the terminal, or copy them into a text document later.\nGetting set up\nCreate a directory for this exercise, and change your working dir to go there. You can do this either in your $HOME dir (e.g. ~/pracs-sp21/w02/ex2/) or your personal dir in the course’s project dir (/fs/ess/PAS1855/users/$USER/w02/ex2/).\nCreate a disorganized mock project\nUsing the touch command and brace expansions, create a mock project by creating 100s of empty files, either in a single directory or a disorganized directory structure.\nIf you want, you can create file types according to what you typically have in your project – otherwise, a suggestion is to create files with:\nRaw data (e.g. .fastq.gz)\nReference data (e.g. .fasta),\nMetadata (e.g. .txt or .csv)\nProcessed data and results (e.g. .bam, .out)\nScripts (e.g. .sh, .py or .R)\nFigures (e.g. .png or .eps)\nNotes (.txt and/or .md)\nPerhaps some other file type you usually have in your projects.\n\nOrganize the mock project\nOrganize the mock project according to some of the principles we discussed this week.\nEven while adhering to these principles, there is plenty of wiggle room and no single perfect dir structure: what is optimal will depend on what works for you and on the project size and structure. Therefore, think about what makes sense to you, and what makes sense given the files you find yourself with.\nTry to use as few commands as possible to move the files – use wildcards!\nChange file permissions\nChange permissions to what you think is reasonable; but in any case, make sure no-one has write permissions for the raw data files.\nHints\nUse the chmod command to change file permissions and recall that you can use wildcard expansion to operate on many files at once. Alternatively, chmod also has an -R argument to act recursively.\n\nCreate mock alignment files\nCreate a directory alignment inside an appropriate dir in your project (e.g. analysis, results, or a dir for processed data), and create files for all combinations of 30 samples (01-30), 5 treatments (A-E), and 2 dates (08-14-2020 and 09-16-2020), like so: sample01_A_08-14-2020.sam - sample50_H_09-16-2020.sam.\nThese 300 files can be created with a single touch command.\nHints\nUse brace expansion three times: to expand sample IDs, treatments, and dates.\nNote that {01..20} will successfully zero-pad single-digit numbers.\n\nRename files in a batch\nWoops! We stored the alignment files that we created in the previous step as SAM files (.sam), but this was a mistake – the files are actually the binary counterparts of SAM files: BAM files (.bam).\nMove into the dir with your misnamed BAM files, and use a for loop to rename them: change the extension from .sam to .bam.\nHints\nLoop over the files using globbing (wildcard expansion) directly; there is no need to call ls.\nUse the basename command to strip the extension.\nStore the output of the basename call using command substitution ($(command) syntax).\nThe new extension can simply be pasted behind the file name, like newname=${filename_no_extension}bam or newname=$(basename ...)bam.\nCopy files with wildcards\nStill in the dir with your SAM files, create a new dir called subset. Then, using a single cp command, copy files that satisfy the following conditions into the subset dir:\nThe sample ID/number should be 01-19;\nThe treatment should be A, B, or C.\n\nCreate a README.md in the dir that explains what you did.\nHints\nJust like you used multiple consecutive brace expansions above, you can use two consecutive wildcard character sets ([]) here.\n\nBonus: a trickier wildcard selection\nStill in the dir with your SAM files, create a new dir subset2. Then, copy all files except the one for “sample28” into this dir. Do so using a single cp command, though you’ll need two separate wildcard expansion or brace expansion arguments (as in cp wildcard-selection1 wildcard-selection2 destination/).\nHints\nWhen using brace expansion ({}), simply use two numeric ranges: smaller than and larger than the ID that is to be excluded.\nWhen trying to do this with wildcard character sets ([]), you’ll realize one of its limits: you can’t combine conditions with a logical and. Therefore, to exclude only sample 28, you separately have to select IDs that do not start with a 2, and IDs that do start with a 2 but do not end with an 8.\nBonus: a trickier renaming loop\nYou now realize that your date format is suboptimal (MM-DD-YYYY to give 08-14-2020 and 09-16-2020) and that you should use the YYYY-MM-DD format. Use a for loop to rename the files.\nHints\nUse cut to extract the three elements of the date (day, month, and year) on three separate lines.\nStore the output of these lines in variables using commands substitution, like: day=$(commands).\nFinally, paste your new file name together like: newname=${part1}_${year} etc.\nWhen writing you commands, start by echo-ing a single example file name, as in: echo sample23_C_09-16-2020.sam | cut ....\nCreate a README\nInclude a README.md that described what you did; again, try to get familiar with Markdown syntax by using formatting liberally.\nBonus exercises\nExercise 3\nIf you feel like it would be good to reorganize one of your own, real projects, you can do so using what you’ve learned this week. Make sure you create a backup copy of the entire project first!\nBuffalo Chapter 3 code-along\nMove back to /fs/ess/PAS1855/users/$USER and download the repository accompanying the Buffalo book using git clone https://github.com/vsbuffalo/bds-files.git. Then, move into the new dir bds-files, and code along with Buffalo Chapter 3.\n\nSolutions\nExercise 2\n1. Getting set up\nmkdir ~/pracs-sp21/w02/ex2/ # or similar, whatever dir you chose\ncd !$                       # !$ is a shortcut to recall the last argument from the last commands\n\n2. Create a disorganized mock project\nAn example:\ntouch sample{001..150}_{F,R}.fastq.gz\ntouch ref.fasta ref.fai\ntouch sample_info.csv sequence_barcodes.txt\ntouch sample{001..150}.{bam,.bam.bai,_fastqc.zip,_fastqc.html}.bam.bai gene-counts.tsv DE-results.txt GO-out.txt\ntouch fastqc.sh multiqc.sh align.sh sort_bam.sh count1.py count2.py DE.R GO.R KEGG.R\ntouch Fig{1..5}.png all_qc_plots.eps weird-sample.png\ntouch dontforget.txt README.md README_DE.md tmp5.txt\ntouch slurm-84789570.out slurm-84789571.out slurm-84789572.out\n\n3. Organize the mock project\nAn example:\nCreate directories:\nmkdir -p data/{raw,meta,ref}\nmkdir results/{alignment,counts,DE,enrichment,logfiles,qc/figures}\nmkdir -p scripts\nmkdir -p figures/{ms,sandbox}\nmkdir -p doc/misc\nMove files:\nmv *fastq.gz data/raw/\nmv ref.fa* data/ref/\nmv sample_info.csv sequence_barcodes.txt data/meta/\nmv *.bam *.bam.bai results/alignment/\nmv *fastqc* results/qc/\nmv gene_counts.tsv results/counts/\nmv DE-results.txt results/DE/\nmv GO-out.txt results/enrichment/\nmv *.sh *.R *.py scripts/\nmv README_DE.md results/DE/\nmv Fig[0-9]* figures/ms\nmv weird-sample.png figures/sandbox\nmv all_qc_plots.eps results/qc/figures/\nmv dontforget.txt tmp5.txt doc/misc/\nmv slurm* results/logfiles/\n\n4. Change file permissions\nTo ensure that no-one has write permission for the raw data, you could, for example, use:\nchmod a=r data/raw/*\n\nchmod a-w data/raw/*\n\n5. Create mock alignment files\n$ mkdir -p results/alignment\n$ # rm results/alignment/* # In the example above, we already had such a dir with files\n\n# Create the files:\n$ touch sample{01..30}_{A..E}_{08-14-2020,09-16-2020}.sam\n\n# Check if we have 400 files:\n$ ls | wc -l\n# 400\n\n6. Rename files in a batch\n# Move into the directory so we don't have to deal with dirname:\ncd results/alignment\n\n# Use *globbing* to match the files to loop over (rather than `ls`):\nfor oldname in *.sam\ndo\n   # Remove the `sam` suffix using `basename $oldname sam`,\n   # use command substitution (`$()` syntax) to catch the output of the\n   # `basename` command, and paste `bam` at the end:\n   newname=$(basename $oldname sam)bam\n   \n   # Report what we have:\n   # (Using `-e` with echo we can print an extra newline with '\\n`,\n   # to separate files by an empty line)\n   echo \"Old name: ${oldname}\"\n   echo -e \"New name: ${newname} \\n\"\n   \n   # Execute the move:\n   mv ${oldname} ${newname}\ndone\nA couple of take-aways:\nNote that we don’t need a special construction to paste strings together. we simply type bam after what will be the extension-less file name from the basename command.\nWe print the old and new names to screen; this is not necessary, of course, but good practice. Moreover, this way we can test whether our loop works before adding the mv command.\nWe use informative variable names (oldname and newname), not cryptic ones like i and o.\n7. Copy files with wildcards\nCreate the new dir:\nmkdir subset\nCopy the files using three consecutive wildcard selections:\ncp sample[0-1][0-9]_[A-C]* subset/\nReport what we did, including a command substitution to insert the current date:\necho \"On $(date), created a dir \"subset\" and copied only files for samples 1-29 \\\nand treatments A-D into this dir\" > subset/README.md\n\n8. Bonus: a trickier wildcard selection\nCreate the new dir:\nmkdir subset2\nThe most straightforward way in this case is using two brace expansion selections, one for sample numbers smaller than 28, and one for sample numbers larger than 28:\ncp sample{01..27}* sample{29..30}* subset2/\nHowever, we may not always be able to use ranges, and being a little creative with wildcard expansion also works — first we select all samples not starting with a 2, and then among samples that do start with a 2, we exclude 28:\ncp sample[^2]* sample2[^8]* subset2/\n\n9. Bonus: a trickier renaming loop\nfor oldname in sample01*.bam\ndo\n   # Use `cut` to extract month, day, year, and a \"prefix\" that contains\n   # the sample number and the treatment, and save these using command substitution:\n   month=$(echo ${oldname} | cut -d \"_\" -f 3 | cut -d \"-\" -f 1)\n   day=$(echo ${oldname} | cut -d \"_\" -f 3 | cut -d \"-\" -f 2)\n   year=$(basename ${oldname} .bam | cut -d \"_\" -f 3 | cut -d \"-\" -f 3)\n   prefix=$(echo ${oldname} | cut -d \"_\" -f 1-2)\n   \n   # Paste together the new name:\n   newname=${prefix}_${year}-${month}-${day}.bam\n   \n   # Report what we have:\n   echo \"Old name: ${oldname}\"\n   echo -e \"New name: ${newname} \\n\"\n   \n   # Execute the move:\n   mv ${oldname} ${newname}\ndone\n\n\nThis can be done more succinctly using regular expression and the sed command, both of which we’ll learn about later in the course.\n\n\n\n\n\n\n",
      "last_modified": "2021-01-12T11:09:06-05:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
