{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "author": [],
      "contents": "\nThis is the Github website for the course Practical Computing Skills for Biologists (a section of PP8300 – Current Topics in Plant Pathology), a 2-credit online-only course at Ohio State University during the Spring semester of 2021. The course is taught by Jelmer Poelstra from the MCIC.\nOnly slide decks, code-along materials, and exercises are hosted on this website. If you are a student in this course, your starting point should always be the CarmenCanvas site for this course. (Note that you can always find the link to the CarmenCanvas site in the top-right corner of this site by clicking on the graduation cap icon.)\n\n\n\n",
      "last_modified": "2021-01-10T16:32:13-05:00"
    },
    {
      "path": "index.html",
      "title": "",
      "author": [],
      "contents": "\n\n\nPractical Computing Skills for Biologists  Spring 2021  A section of Current Topics in Plant Pathology (PLNTPTH 8300)\n\n\n\n\n",
      "last_modified": "2021-01-10T16:32:13-05:00"
    },
    {
      "path": "week02_exercises.html",
      "title": "Week 2 Exercises",
      "author": [],
      "contents": "\nExercise 1: Course notes in Markdown\nCreate a Markdown document with course notes. I recommend writing this in VS Code.\nCover this week’s material in some detail – if you made notes for last week in another format, copy/digitize those too. (And try to keep using this document throughout the course!)\nUse several header levels and use them consistently: e.g. a level 1 header (#) for the document’s title, level 2 headers (##) for each week, and so on.\nThough it should foremost be a functional document for notes, try to incorporate any appropriate formatting option: e.g. bold text, italic text, inline code, code blocks, ordered/unordered lists, hyperlinks, and perhaps a figure.\nYou may even want to try your hand at a table in Markdown (e.g. for an overview of certain commands), though admittedly, the syntax for a table is not particularly graceful or easy to use.\nMake sure you know how to start a new paragraph and how to force a newline.\n\nExercise 2\nWhile doing this exercise, save the commands you use in a text document – either write in a text document in VS Code and send the commands to the terminal, or copy them into a text document later.\nCreate a directory for this exercise, and change your working dir to go there. You can do this either in your $HOME dir (e.g. ~/pracs-sp21/w02/ex2/) or your dir in the project dir (/fs/ess/PAS1855/users/$USER/w02/ex2/).\nUsing the touch command and brace expansion, create 100s of empty files, either in a single directory or a disorganized dir structure. If you want, you can create file types according to what you typically have in your project – otherwise, create files with:\nRaw data (e.g. .fastq.gz)\nReference data (e.g. .fasta),\nMetadata (e.g. .txt or .csv)\nProcessed data and results (e.g. .bam, .out)\nScripts (e.g. .sh, .py or .R)\nFigures (e.g. .png or .eps)\nNotes (.txt and/or .md)\nPerhaps some other file type you usually have in your projects.\nOrganize the project according to some of the principles we discussed this week. As we saw, there is no single perfect dir structure, this will vary according to what works for you and also depends on the project size and structure. Therefore, think about what makes sense to you, and what makes in light of the files you find yourself with.\nTry to use as few commands as possible to move the files – use wildcards!\nChange permissions to what you think is reasonable; but certainly, make sure no-one (not even you) has write permissions for the raw data.\nCreate a directory alignment inside an appropriate dir in your project (e.g. analysis, results, or a dir for processed data), and create files for 99 samples (01-99) and 8 treatments (A-H): sample01_A.sam - sample99_H.sam. This can be done with a single touch command.\nCreate a new dir subset and copy the files for samples 1-40 and treatments A-D into this dir, using a single mv command. Create a README.md in the dir that explains what you did. Hint: you can use two consecutive character sets.\nBonus: a trickier wildcard selection. Create a new dir subset2 and copy all files except the two for “sample48” into this dir, using a single mv command.\nWoops! We stored our alignment files, created in 5., as SAM files (.sam), but this was an error – the files are actually the binary counterparts of SAM files: BAM files (.bam).\nUse a for loop to rename the files: change the extension from .sam to .bam. This can be most easily done with the basename command.\nBonus: a trickier renaming loop.\nInclude a README.md that described what you did; again, try to get familiar with Markdown syntax by using formatting liberally.\nExercise 3 (Optional)\nBonus: If you feel like it would be good to reorganize one of your own projects, you can do so using what you’ve learned this week. But make sure you create backup copy first!\nSolutions\n\necho F3D141_S207_L001_R1_001.fq | cut -d_ -f1-4\nfor i in *.fq\ndo\n   newname=$(echo $i | cut -d_ -f1-4).fq\n   mv $i $newname\ndone\n\nBonus: Copy all files except the two for “sample48” into a new directory called selection — use a wildcard to do the move with a single command.\nmkdir selection\nmv sample04[^8]* sample?[^4]* selection/\nmv sample{001..047}* sample{049..100}* selection/\n```{.r .distill-force-highlighting-css}\n\n\n",
      "last_modified": "2021-01-10T16:32:14-05:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
